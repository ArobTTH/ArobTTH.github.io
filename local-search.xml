<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记录 代码块测试</title>
    <link href="/2022/04/10/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/04/10/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="代码块测试"><a href="#代码块测试" class="headerlink" title="代码块测试"></a>代码块测试</h1><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cuda/helper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cuda_runtime.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cublas_v2.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Eigen&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Eigen;<br><span class="hljs-keyword">using</span> DataTp = <span class="hljs-keyword">float</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2048</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2048</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CPU_GeMM</span><span class="hljs-params">(DataTp** matrix_a, DataTp** matrix_b, DataTp** matrix_c)</span> </span>&#123;<br><br>    <span class="hljs-built_in">TI_CPU</span>(cpu)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; N; k++) &#123;<br>                matrix_c[i][j] += matrix_a[i][k]*matrix_b[k][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">TO_CPU</span>(cpu,<span class="hljs-string">&quot;cpu takes&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//cout &lt;&lt; &quot;CPU takes: &quot;&lt;&lt;endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Eigen_GeMM</span><span class="hljs-params">()</span> </span>&#123;<br><br>    MatrixXf Em1 = MatrixXf::<span class="hljs-built_in">Random</span>(M,N);<br>    MatrixXf Em2 = MatrixXf::<span class="hljs-built_in">Random</span>(N,M);<br>    MatrixXf Em3 = MatrixXf::<span class="hljs-built_in">Zero</span>(M,M);<br>    <span class="hljs-built_in">TI_CPU</span>(Eigen)<br>    Em3 = Em1 * Em2;<br>    <span class="hljs-built_in">TO_CPU</span>(Eigen,<span class="hljs-string">&quot;Eigen takes&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//cout &lt;&lt; &quot;Eigen takes: &quot;&lt;&lt;endl;</span><br>&#125;<br><br><span class="hljs-function">__global__ <span class="hljs-keyword">void</span> <span class="hljs-title">GPU_GeMM</span><span class="hljs-params">(<span class="hljs-keyword">const</span> DataTp* matrix_a, <span class="hljs-keyword">const</span> DataTp* matrix_b, DataTp* matrix_c)</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> ix = blockIdx.x * blockDim.x + threadIdx.x;<br>    <span class="hljs-keyword">int</span> iy = blockIdx.y * blockDim.y + threadIdx.y;<br><br>    DataTp ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ix &lt; M &amp;&amp; iy &lt; N) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i&lt;M; i++) &#123;<br>            ret += matrix_a[ix * N + i] * matrix_b[i * N + iy];<br>        &#125;<br>        matrix_c[ix * N + iy] = ret;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GPU_GeMM_launcher</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> DataTp* matrix_a, <span class="hljs-keyword">const</span> DataTp* matrix_b, DataTp* matrix_c)</span> </span>&#123;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> threadNX = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> threadNY = <span class="hljs-number">32</span>;<br>    <span class="hljs-function">dim3 <span class="hljs-title">block</span><span class="hljs-params">(threadNX,threadNY)</span></span>;<br><br>    <span class="hljs-keyword">int</span> NX_blocks = (M + threadNX - <span class="hljs-number">1</span>) / threadNX;<br>    <span class="hljs-keyword">int</span> NY_blocks = (N + threadNY - <span class="hljs-number">1</span>) / threadNY;<br><br>    <span class="hljs-function">dim3 <span class="hljs-title">grid</span><span class="hljs-params">(NX_blocks,NY_blocks)</span></span>;<br><br>    <span class="hljs-built_in">TI_GPU</span>(GPU);<br>    GPU_GeMM&lt;&lt;&lt;grid,block&gt;&gt;&gt;(matrix_a,matrix_b,matrix_c);<br>    <span class="hljs-built_in">TO_GPU</span>(GPU,<span class="hljs-string">&quot;GPU takes: &quot;</span>,<span class="hljs-number">1</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Cublas_GPU</span><span class="hljs-params">(<span class="hljs-keyword">const</span> DataTp* matrix_a, <span class="hljs-keyword">const</span> DataTp* matrix_b, DataTp* matrix_c)</span> </span>&#123;<br>    cublasHandle_t handle;<br>    <span class="hljs-keyword">const</span> DataTp alpha = <span class="hljs-number">1.0f</span>;<br>    <span class="hljs-keyword">const</span> DataTp beta = <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-built_in">cublasCreate_v2</span>(&amp;handle);<br>    <span class="hljs-built_in">cublasSgemm_v2</span>(handle,CUBLAS_OP_N,CUBLAS_OP_N,<br>                M,N,M,&amp;alpha,matrix_a,M,<br>                matrix_b,M,&amp;beta,matrix_c,M);<br><br>    <span class="hljs-built_in">cublasDestroy_v2</span>(handle);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Matrix_init</span><span class="hljs-params">(DataTp** matrix_a, DataTp** matrix_b,DataTp** matrix_c)</span> </span>&#123;<br><br>    std::random_device randomDevice;<br>    <span class="hljs-function">std::mt19937 <span class="hljs-title">mt</span><span class="hljs-params">(randomDevice())</span></span>;<br>    <span class="hljs-function">std::uniform_real_distribution&lt;<span class="hljs-keyword">float</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">-1.0</span>,<span class="hljs-number">1.0</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N;j++) &#123;<br>            matrix_a[i][j] = <span class="hljs-built_in">distribution</span>(mt);<br>            matrix_b[i][j] = <span class="hljs-built_in">distribution</span>(mt);<br>            matrix_c[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//    for (int i = 0; i &lt; M; i++) &#123;</span><br><span class="hljs-comment">//        for (int j = 0; j &lt; N;j++) &#123;</span><br><span class="hljs-comment">//            matrix_a[i][j] = 1;</span><br><span class="hljs-comment">//            matrix_b[i][j] = 1;</span><br><span class="hljs-comment">//            matrix_c[i][j] = 0;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Matrix_print</span><span class="hljs-params">(DataTp** matrix)</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; M;j++) &#123;<br>            cout&lt;&lt; matrix[i][j]&lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br><br>            <span class="hljs-keyword">if</span>( j % M == (M<span class="hljs-number">-1</span>)) &#123;<br>                cout&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Matrix_print_GPU</span><span class="hljs-params">(DataTp* matrix)</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M*N; i++) &#123;<br>            cout&lt;&lt; matrix[i]&lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br><br>            <span class="hljs-keyword">if</span>( i % M == (M<span class="hljs-number">-1</span>)) &#123;<br>                cout&lt;&lt;endl;<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//cout&lt;&lt; matrix[0]&lt;&lt;endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    DataTp **matrix_a,**matrix_b,**matrix_c;<br><br>    matrix_a = (DataTp**) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DataTp*) * M);<br>    matrix_b = (DataTp**) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DataTp*) * M);<br>    matrix_c = (DataTp**) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DataTp*) * M);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        matrix_a[i] = (DataTp*) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (DataTp) * N);<br>        matrix_b[i] = (DataTp*) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (DataTp) * N);<br>        matrix_c[i] = (DataTp*) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (DataTp) * N);<br>    &#125;<br><br>    <span class="hljs-function">memory_unit&lt;DataTp&gt; <span class="hljs-title">mat_a</span><span class="hljs-params">(M * N)</span></span>;<br>    <span class="hljs-function">memory_unit&lt;DataTp&gt; <span class="hljs-title">mat_b</span><span class="hljs-params">(M * N)</span></span>;<br>    <span class="hljs-function">memory_unit&lt;DataTp&gt; <span class="hljs-title">mat_c</span><span class="hljs-params">(M * N)</span></span>;<br><br>    <span class="hljs-built_in">Matrix_init</span>(matrix_a,matrix_b,matrix_c);<br><br>   mat_a.<span class="hljs-built_in">init</span>(<span class="hljs-number">1</span>);<br>   mat_b.<span class="hljs-built_in">init</span>(<span class="hljs-number">1</span>);<br>   mat_c.<span class="hljs-built_in">init</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-built_in">CPU_GeMM</span>(matrix_a, matrix_b, matrix_c);<br><br>    <span class="hljs-built_in">Eigen_GeMM</span>();<br><br>    <span class="hljs-built_in">GPU_GeMM_launcher</span>(mat_a.device_ptr,<br>                      mat_b.device_ptr,<br>                      mat_c.device_ptr);<br><br><br>    <span class="hljs-built_in">Cublas_GPU</span>(mat_a.device_ptr,<br>               mat_b.device_ptr,<br>               mat_c.device_ptr);<br><br><br>    <span class="hljs-comment">//mat_c.d2h();</span><br>    <span class="hljs-comment">//Matrix_print(matrix_c);</span><br><span class="hljs-comment">//    Matrix_print_GPU(mat_c.host_ptr);</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
