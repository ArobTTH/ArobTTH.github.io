<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「CUDA入门」01：第一个CUDA程序</title>
    <link href="/2022/04/10/cuda-01/"/>
    <url>/2022/04/10/cuda-01/</url>
    
    <content type="html"><![CDATA[<h2 id="写在开始之前"><a href="#写在开始之前" class="headerlink" title="写在开始之前"></a>写在开始之前</h2><p>硕士课题有一部分是用<a href="https://en.wikipedia.org/wiki/Lattice_Boltzmann_methods">格子玻尔兹曼方法</a> ，做沸腾冷凝过程的两相流动力学模拟。因为整个模拟的核心部分是自编程实现的，<del>对非cs科班出身的我来说</del>，在学习过程自然是遇到了不少流体力学本身之外的麻烦，其中就涉及到<a href="https://en.wikipedia.org/wiki/High-performance_computing">高性能计算</a> 领域的问题，说人话也就是如何让代码算得更快一些。考虑到我一直是用我自己的电脑编程，LBM算法也是一类极适合与GPU并行的算法，正好手里也有一张性能不错的30系显卡（<del>2077我真谢谢你</del>），就把目光主要放在GPU并行上了。本系列主要是个人CUDA学习的小结归纳，如果对跟我一样的<strong>编程苦手</strong>有所帮助，那就再好不过了。</p><div class="note note-info">            <p>这是我目前的开发平台(RYPC2020)，软件以及相关版本</p><ul><li>CPU: AMD 5600X (<a href="mailto:&#x36;&#x43;&#x31;&#50;&#x54;&#64;&#x34;&#x2e;&#54;&#x47;&#x48;&#122;">&#x36;&#x43;&#x31;&#50;&#x54;&#64;&#x34;&#x2e;&#54;&#x47;&#x48;&#122;</a>)</li><li>GPU: NVIDIA RTX3070 (GIGABYTE Vision2.0)</li><li>RAM: HOF 8G×4 (3600MHz@c18)</li><li>IDE: clion 2021.3.4</li><li>CMake: VERSION 3.21</li><li>Compiler：MSVC (amd64)</li></ul>          </div><h2 id="CUDA是什么"><a href="#CUDA是什么" class="headerlink" title="CUDA是什么"></a>CUDA是什么</h2><div class="note note-info">            <p><strong>CUDA</strong>（<strong>C</strong>ompute <strong>U</strong>nified <strong>D</strong>evice <strong>A</strong>rchitecture，<strong>统一计算架构</strong>是由英伟达<a href="https://zh.wikipedia.org/wiki/NVIDIA">NVIDIA</a>所推出的一种集成技术，是该公司对于<a href="https://zh.wikipedia.org/wiki/GPGPU">GPGPU</a>的正式名称。透过这个技术，用户可利用NVIDIA的<a href="https://zh.wikipedia.org/wiki/GeForce_8">GeForce 8</a>以后的GPU和较新的<a href="https://zh.wikipedia.org/wiki/Quadro">Quadro</a> <a href="https://zh.wikipedia.org/wiki/GPU">GPU</a>进行计算。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="维基百科对CUDA的介绍">[1]</span></a></sup></p><div align="right">——维基百科对CUDA的描述</div>          </div><p>简而言之，Nvidia通过开发CUDA架构，使得原本主要负责图形计算GPU芯片，现在也可以通过CUDA的接口，在具有Nvidia Gefore/Quadro/Tesla显卡的设备上实现<strong>通用计算</strong>了。CUDA在各个平台的配置教程网上都有比较详细的讲解<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="CLion配置CUDA">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="VS2019配置CUDA">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="VScode配置CUDA">[4]</span></a></sup>，这里就不过多赘述。</p><h2 id="第一个CUDA程序"><a href="#第一个CUDA程序" class="headerlink" title="第一个CUDA程序"></a>第一个CUDA程序</h2><div class="note note-info">            <p>“hello world from GPU”</p>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zh.wikipedia.org/wiki/CUDA">维基百科对CUDA的介绍</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/luyuyingyingying/article/details/114448267">CLion配置CUDA</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/u011314529/article/details/51353097">VS2019配置CUDA</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/lumping/article/details/107658678">VScode配置CUDA</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CUDA</tag>
      
      <tag>GPU</tag>
      
      <tag>编程</tag>
      
      <tag>并行计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
